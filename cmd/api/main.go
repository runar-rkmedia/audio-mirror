package main

import (
	"context"
	"log"
	"net/http"

	"connectrpc.com/connect"
	"golang.org/x/net/http2"
	"golang.org/x/net/http2/h2c"

	apiv1 "github.com/runar-rkmedia/audio-mirror/gen/api/v1" // generated by protoc-gen-go
	"github.com/runar-rkmedia/audio-mirror/gen/api/v1/apiv1connect"
)

type FeedServer struct{}

func (s *FeedServer) GetChannels(
	ctx context.Context,
	req *connect.Request[apiv1.GetChannelsRequest],
) (*connect.Response[apiv1.GetChannelsResponse], error) {
	log.Println("Request headers: ", req.Header())
	res := connect.NewResponse(&apiv1.GetChannelsResponse{
		Channels: []*apiv1.Channel{},
	})
	res.Msg.Channels = append(res.Msg.Channels, &apiv1.Channel{
		Id:          "abc",
		Type:        apiv1.ChannelType_CHANNEL_TYPE_PODCAST,
		Title:       "foobar",
		Description: "yay",
		ImageUrl:    "bob",
	})
	res.Header().Set("Greet-Version", "v1")
	return res, nil
}

func main() {
	greeter := &FeedServer{}
	mux := http.NewServeMux()
	path, handler := apiv1connect.NewFeedServiceHandler(greeter)
	mux.Handle(path, handler)
	http.ListenAndServe(
		"localhost:8080",
		// Use h2c so we can serve HTTP/2 without TLS.
		h2c.NewHandler(mux, &http2.Server{}),
	)
}
