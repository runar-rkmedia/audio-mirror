// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/v1/pods.proto

package apiv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/runar-rkmedia/audio-mirror/gen/api/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// FeedServiceName is the fully-qualified name of the FeedService service.
	FeedServiceName = "api.v1.FeedService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// FeedServiceGetChannelsProcedure is the fully-qualified name of the FeedService's GetChannels RPC.
	FeedServiceGetChannelsProcedure = "/api.v1.FeedService/GetChannels"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	feedServiceServiceDescriptor           = v1.File_api_v1_pods_proto.Services().ByName("FeedService")
	feedServiceGetChannelsMethodDescriptor = feedServiceServiceDescriptor.Methods().ByName("GetChannels")
)

// FeedServiceClient is a client for the api.v1.FeedService service.
type FeedServiceClient interface {
	// Returns a list of channels, like podcasts or audio-book.
	GetChannels(context.Context, *connect.Request[v1.GetChannelsRequest]) (*connect.Response[v1.GetChannelsResponse], error)
}

// NewFeedServiceClient constructs a client for the api.v1.FeedService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewFeedServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) FeedServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &feedServiceClient{
		getChannels: connect.NewClient[v1.GetChannelsRequest, v1.GetChannelsResponse](
			httpClient,
			baseURL+FeedServiceGetChannelsProcedure,
			connect.WithSchema(feedServiceGetChannelsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// feedServiceClient implements FeedServiceClient.
type feedServiceClient struct {
	getChannels *connect.Client[v1.GetChannelsRequest, v1.GetChannelsResponse]
}

// GetChannels calls api.v1.FeedService.GetChannels.
func (c *feedServiceClient) GetChannels(ctx context.Context, req *connect.Request[v1.GetChannelsRequest]) (*connect.Response[v1.GetChannelsResponse], error) {
	return c.getChannels.CallUnary(ctx, req)
}

// FeedServiceHandler is an implementation of the api.v1.FeedService service.
type FeedServiceHandler interface {
	// Returns a list of channels, like podcasts or audio-book.
	GetChannels(context.Context, *connect.Request[v1.GetChannelsRequest]) (*connect.Response[v1.GetChannelsResponse], error)
}

// NewFeedServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewFeedServiceHandler(svc FeedServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	feedServiceGetChannelsHandler := connect.NewUnaryHandler(
		FeedServiceGetChannelsProcedure,
		svc.GetChannels,
		connect.WithSchema(feedServiceGetChannelsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/api.v1.FeedService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case FeedServiceGetChannelsProcedure:
			feedServiceGetChannelsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedFeedServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedFeedServiceHandler struct{}

func (UnimplementedFeedServiceHandler) GetChannels(context.Context, *connect.Request[v1.GetChannelsRequest]) (*connect.Response[v1.GetChannelsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.FeedService.GetChannels is not implemented"))
}
